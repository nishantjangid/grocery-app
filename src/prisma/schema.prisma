// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

enum Role {
  USER
  ADMIN
}

model Inventory {
  id        Int      @id @default(autoincrement())
  groceryId Int      @unique
  stock     Int
  sold      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Grocery Grocery @relation(fields: [groceryId], references: [id], onDelete: Cascade)
}

model Grocery {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  price     Float
  inventory Inventory?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  user      User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  groceryId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order   Order   @relation(fields: [orderId], references: [id])
  Grocery Grocery @relation(fields: [groceryId], references: [id])
}
